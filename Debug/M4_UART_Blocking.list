
M4_UART_Blocking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011cc  080011cc  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080011cc  080011cc  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011cc  080011cc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011cc  080011cc  000111cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011d0  080011d0  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080011d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          000001c8  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001d7e  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000076b  00000000  00000000  00021e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  000225b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000138  00000000  00000000  00022780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c1d0  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002afb  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a2814  00000000  00000000  00041583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a0c  00000000  00000000  000e3d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000e47a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050
 80001fc:	00000000 	.word	0x00000000
 8000200:	08001164 	.word	0x08001164

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000054 	.word	0x20000054
 800021c:	08001164 	.word	0x08001164

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <LED_LD2_Init>:

// 1 - On
// 0 - Off

void LED_LD2_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	// LD2 on PA5
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <LED_LD2_Init+0x2c>)
 80002c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c8:	4a08      	ldr	r2, [pc, #32]	; (80002ec <LED_LD2_Init+0x2c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002de:	6013      	str	r3, [r2, #0]
//	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5); // After reset is ok

//	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);

//	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <LED_LD2_Toggle>:
//	GPIOA->ODR &= ~(GPIO_ODR_OD5);
	GPIOA->BSRR = GPIO_BSRR_BR5;
}

__attribute__((always_inline)) inline void LED_LD2_Toggle(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_OD5;
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fe:	f083 0320 	eor.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <LPUART1_GPIO_Init>:
 */
#include "main.h"
#include "lpuart.h"

void LPUART1_GPIO_Init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	// TX - PA2
	// RX - PA3

	// Enable clock for GPIO pins
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <LPUART1_GPIO_Init+0x4c>)
 8000316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000318:	4a10      	ldr	r2, [pc, #64]	; (800035c <LPUART1_GPIO_Init+0x4c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE3_0);
	GPIOA->AFR[0] |= (12 << GPIO_AFRL_AFSEL3_Pos);
	GPIOA->OTYPER |= GPIO_OTYPER_OT3;
*/
	// TX and RX once
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0); // AF Mode
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800032a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800032e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= ((12 << GPIO_AFRL_AFSEL2_Pos) | (12 << GPIO_AFRL_AFSEL3_Pos)); // Select AF number
 8000330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000334:	6a1b      	ldr	r3, [r3, #32]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800033a:	f443 434c 	orr.w	r3, r3, #52224	; 0xcc00
 800033e:	6213      	str	r3, [r2, #32]
	GPIOA->OTYPER |= GPIO_OTYPER_OT3; // Set push-pull output type for TX pin
 8000340:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6053      	str	r3, [r2, #4]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <LPUART1_Config>:

void LPUART1_Config(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
	// Enable UART Clock
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <LPUART1_Config+0x4c>)
 8000368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <LPUART1_Config+0x4c>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	65d3      	str	r3, [r2, #92]	; 0x5c
	// ROUND UP
	// LPUARTDIV = 256 * (48000000 / 115200) = 106667
	// Calculated baudrate: (256*48M)/106666 = 115199,640001125
	// Error = 100 - ((115199,640001125 / 115200)*100) = 0,0003124990234375 %

	uint32_t BRR_Value = 106666; // 256 * (48000000 / 115200);
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <LPUART1_Config+0x50>)
 8000374:	607b      	str	r3, [r7, #4]
	if(BRR_Value < 0x300 || BRR_Value > 0xFFFFF) while(1); // Check constraints
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800037c:	d303      	bcc.n	8000386 <LPUART1_Config+0x26>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000384:	d300      	bcc.n	8000388 <LPUART1_Config+0x28>
 8000386:	e7fe      	b.n	8000386 <LPUART1_Config+0x26>

	LPUART1->BRR = BRR_Value & USART_BRR_LPUART; // Set calculated baudrate
 8000388:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LPUART1_Config+0x54>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000390:	60d3      	str	r3, [r2, #12]

//	LPUART1->CR1 |= USART_CR1_UE; // Enable UART
//	LPUART1->CR1 |= USART_CR1_TE; // Enable UART Transmitter
//	LPUART1->CR1 |= USART_CR1_RE; // Enable UART Receiver

	LPUART1->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE); // Enable all in one time
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <LPUART1_Config+0x54>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <LPUART1_Config+0x54>)
 8000398:	f043 030d 	orr.w	r3, r3, #13
 800039c:	6013      	str	r3, [r2, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	0001a0aa 	.word	0x0001a0aa
 80003b4:	40008000 	.word	0x40008000

080003b8 <LPUART1_Init>:

void LPUART1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	LPUART1_GPIO_Init();
 80003bc:	f7ff ffa8 	bl	8000310 <LPUART1_GPIO_Init>
	LPUART1_Config();
 80003c0:	f7ff ffce 	bl	8000360 <LPUART1_Config>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <LPUART1_SendChar>:

void LPUART1_SendChar(char ch)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	LPUART1->TDR = ch; // Put char to send into TX buffer
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <LPUART1_SendChar+0x2c>)
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	6293      	str	r3, [r2, #40]	; 0x28

	while(!(LPUART1->ISR & USART_ISR_TXE_TXFNF))
 80003d8:	bf00      	nop
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <LPUART1_SendChar+0x2c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <LPUART1_SendChar+0x12>
	{
		// Wait for empty buffer
	}
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40008000 	.word	0x40008000

080003f8 <LPUART1_SendString>:

void LPUART1_SendString(char *str)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	while(*str != '\0') // If there is something to send
 8000400:	e007      	b.n	8000412 <LPUART1_SendString+0x1a>
	{
		LPUART1_SendChar(*str); // Send char
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ffde 	bl	80003c8 <LPUART1_SendChar>
		str++; // Next char
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3301      	adds	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
	while(*str != '\0') // If there is something to send
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d1f3      	bne.n	8000402 <LPUART1_SendString+0xa>
	}
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <LPUART1_GetChar>:

uint8_t LPUART1_GetChar(char *ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	// If something is in receiver buffer
	if(LPUART1->ISR & USART_ISR_RXNE_RXFNE)
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <LPUART1_GetChar+0x30>)
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	2b00      	cmp	r3, #0
 8000436:	d006      	beq.n	8000446 <LPUART1_GetChar+0x22>
	{
		*ch = LPUART1->RDR; // Take char from buffer
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LPUART1_GetChar+0x30>)
 800043a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043c:	b2da      	uxtb	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	701a      	strb	r2, [r3, #0]
		return 0; // Return no error
 8000442:	2300      	movs	r3, #0
 8000444:	e000      	b.n	8000448 <LPUART1_GetChar+0x24>
	}

	return 1; // return error - nothing to read
 8000446:	2301      	movs	r3, #1
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40008000 	.word	0x40008000

08000458 <main>:

void TaskLD2(void);
void TaskLPUART1(void);

int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	SystemClockSetup();
 800045c:	f000 f93c 	bl	80006d8 <SystemClockSetup>
	TEST1_Init();
 8000460:	f000 f994 	bl	800078c <TEST1_Init>
	TEST1_Off();
 8000464:	f000 f9aa 	bl	80007bc <TEST1_Off>

	LED_LD2_Init();
 8000468:	f7ff ff2a 	bl	80002c0 <LED_LD2_Init>

	LPUART1_Init();
 800046c:	f7ff ffa4 	bl	80003b8 <LPUART1_Init>

	SoftTimerAction(&TimerLD2, TaskLD2);
 8000470:	4914      	ldr	r1, [pc, #80]	; (80004c4 <main+0x6c>)
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <main+0x70>)
 8000474:	f000 f866 	bl	8000544 <SoftTimerAction>
	SoftTimerStart(&TimerLD2, 500);
 8000478:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <main+0x70>)
 800047e:	f000 f86f 	bl	8000560 <SoftTimerStart>

	SoftTimerAction(&TimerLPUART1, TaskLPUART1);
 8000482:	4912      	ldr	r1, [pc, #72]	; (80004cc <main+0x74>)
 8000484:	4812      	ldr	r0, [pc, #72]	; (80004d0 <main+0x78>)
 8000486:	f000 f85d 	bl	8000544 <SoftTimerAction>
	SoftTimerStart(&TimerLPUART1, 2000);
 800048a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800048e:	4810      	ldr	r0, [pc, #64]	; (80004d0 <main+0x78>)
 8000490:	f000 f866 	bl	8000560 <SoftTimerStart>


    /* Loop forever */
	while(1)
	{
		SoftTimerEvent(&TimerLD2);
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <main+0x70>)
 8000496:	f000 f833 	bl	8000500 <SoftTimerEvent>
		SoftTimerEvent(&TimerLPUART1);
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0x78>)
 800049c:	f000 f830 	bl	8000500 <SoftTimerEvent>

		if(!LPUART1_GetChar(&ReceivedChar))
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <main+0x7c>)
 80004a2:	f7ff ffbf 	bl	8000424 <LPUART1_GetChar>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1f3      	bne.n	8000494 <main+0x3c>
		{
			sprintf(ToSend, "Char Received: %c\n\r", ReceivedChar);
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <main+0x7c>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4909      	ldr	r1, [pc, #36]	; (80004d8 <main+0x80>)
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <main+0x84>)
 80004b6:	f000 f9b9 	bl	800082c <siprintf>
			LPUART1_SendString(ToSend);
 80004ba:	4808      	ldr	r0, [pc, #32]	; (80004dc <main+0x84>)
 80004bc:	f7ff ff9c 	bl	80003f8 <LPUART1_SendString>
		SoftTimerEvent(&TimerLD2);
 80004c0:	e7e8      	b.n	8000494 <main+0x3c>
 80004c2:	bf00      	nop
 80004c4:	080004e1 	.word	0x080004e1
 80004c8:	2000006c 	.word	0x2000006c
 80004cc:	080004ed 	.word	0x080004ed
 80004d0:	20000078 	.word	0x20000078
 80004d4:	20000084 	.word	0x20000084
 80004d8:	0800117c 	.word	0x0800117c
 80004dc:	20000088 	.word	0x20000088

080004e0 <TaskLD2>:

	}
}

void TaskLD2(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	LED_LD2_Toggle();
 80004e4:	f7ff ff04 	bl	80002f0 <LED_LD2_Toggle>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <TaskLPUART1>:

void TaskLPUART1(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	LPUART1_SendString("Test\n\r");
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <TaskLPUART1+0x10>)
 80004f2:	f7ff ff81 	bl	80003f8 <LPUART1_SendString>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	08001190 	.word	0x08001190

08000500 <SoftTimerEvent>:
 */
#include "main.h"
#include "software_timers.h"

void SoftTimerEvent(SoftTimer_t *Timer)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if(Timer->TimeToDelay) // If no time to wait - Timer disabled
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d015      	beq.n	800053c <SoftTimerEvent+0x3c>
	{
		if((GetSystemTick() - Timer->LastTick) > Timer->TimeToDelay) // Check if is time to make  action
 8000510:	f000 f8fa 	bl	8000708 <GetSystemTick>
 8000514:	4602      	mov	r2, r0
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	1ad2      	subs	r2, r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	d90b      	bls.n	800053c <SoftTimerEvent+0x3c>
		{
			Timer->LastTick = GetSystemTick(); // Refill action's timer
 8000524:	f000 f8f0 	bl	8000708 <GetSystemTick>
 8000528:	4602      	mov	r2, r0
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	605a      	str	r2, [r3, #4]
			if(Timer->Action)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <SoftTimerEvent+0x3c>
			{
				Timer->Action(); // Make Action!
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4798      	blx	r3
			}
		}
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <SoftTimerAction>:

void SoftTimerAction(SoftTimer_t *Timer, void (*_Action)(void))
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
	Timer->Action = _Action; // Set a new Action
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	609a      	str	r2, [r3, #8]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <SoftTimerStart>:

void SoftTimerStart(SoftTimer_t *Timer, uint32_t Delay)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	if(Delay != 0)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d007      	beq.n	8000580 <SoftTimerStart+0x20>
	{
		Timer->TimeToDelay = Delay; // Set Delay
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	601a      	str	r2, [r3, #0]
		Timer->LastTick = GetSystemTick(); // Get start Tick
 8000576:	f000 f8c7 	bl	8000708 <GetSystemTick>
 800057a:	4602      	mov	r2, r0
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
//		if(Timer->Action)
//		{
//			Timer->Action();
//		}
	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	db0a      	blt.n	80005b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <__NVIC_SetPriority+0x4c>)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b0:	e00a      	b.n	80005c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <__NVIC_SetPriority+0x50>)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	3b04      	subs	r3, #4
 80005c0:	0112      	lsls	r2, r2, #4
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	761a      	strb	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000e100 	.word	0xe000e100
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005ec:	d301      	bcc.n	80005f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00f      	b.n	8000612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <SysTick_Config+0x40>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005fa:	210f      	movs	r1, #15
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f7ff ffc2 	bl	8000588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <SysTick_Config+0x40>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <SysTick_Config+0x40>)
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e000e010 	.word	0xe000e010

08000620 <SystemClockPLL48>:
	// Wait for switch
	while(!(RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0));
}

void SystemClockPLL48(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
// PLL Clock Mux
// PLL ON and set

// HSE 24 MHz select
	// HSE On
	RCC->CR |= RCC_CR_HSEON;
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <SystemClockPLL48+0xb4>)
 800062a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062e:	6013      	str	r3, [r2, #0]

	// Wait for HSE
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000630:	bf00      	nop
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f9      	beq.n	8000632 <SystemClockPLL48+0x12>

// HSE as PLL Source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC);
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000644:	f043 0303 	orr.w	r3, r3, #3
 8000648:	60d3      	str	r3, [r2, #12]

// Dividers for 48M
	// PLLM Divider /2
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClockPLL48+0xb4>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000650:	f043 0310 	orr.w	r3, r3, #16
 8000654:	60d3      	str	r3, [r2, #12]
	// PLLN Multiplier *8 -  default is 0b0010000
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <SystemClockPLL48+0xb4>)
 800065c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000660:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLN_Pos);
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066c:	60d3      	str	r3, [r2, #12]
	// PLLR Divider /2
	// It's default

// PLL Enable
	RCC->CR |= RCC_CR_PLLON;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000678:	6013      	str	r3, [r2, #0]
	// Wait for PLL
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800067a:	bf00      	nop
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <SystemClockPLL48+0xb4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f9      	beq.n	800067c <SystemClockPLL48+0x5c>

// PLL Output R Enable
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <SystemClockPLL48+0xb4>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <SystemClockPLL48+0xb4>)
 800068e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000692:	60d3      	str	r3, [r2, #12]

// Change switch to PLL
	RCC->CFGR |= RCC_CFGR_SW_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <SystemClockPLL48+0xb4>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <SystemClockPLL48+0xb4>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_0;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <SystemClockPLL48+0xb4>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <SystemClockPLL48+0xb4>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6093      	str	r3, [r2, #8]

	// Wait for switch
	while(!((RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0)));
 80006ac:	bf00      	nop
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <SystemClockPLL48+0xb4>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f9      	beq.n	80006ae <SystemClockPLL48+0x8e>
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <SystemClockPLL48+0xb4>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f3      	beq.n	80006ae <SystemClockPLL48+0x8e>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <SystemClockSetup>:
	while(!((RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0)));

	RCC->CFGR &= ~(RCC_CFGR_HPRE);
}
void SystemClockSetup(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
//	SystemClockHSE24();
	SystemClockPLL48();
 80006dc:	f7ff ffa0 	bl	8000620 <SystemClockPLL48>
//	SystemClockPLL100();
//	SystemClockPLL170();

	SysTick_Config(48000000 / 1000);
 80006e0:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80006e4:	f7ff ff7a 	bl	80005dc <SysTick_Config>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <SysTick_Handler>:

// SYSTICK TIMER
void SysTick_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	Tick++; // Increase system timer
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <SysTick_Handler+0x18>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a03      	ldr	r2, [pc, #12]	; (8000704 <SysTick_Handler+0x18>)
 80006f8:	6013      	str	r3, [r2, #0]
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000c8 	.word	0x200000c8

08000708 <GetSystemTick>:

uint32_t GetSystemTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	return Tick;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <GetSystemTick+0x14>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000c8 	.word	0x200000c8

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f000 f88c 	bl	800086c <__errno>
 8000754:	4603      	mov	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <_sbrk+0x64>)
 8000770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20020000 	.word	0x20020000
 8000780:	00000400 	.word	0x00000400
 8000784:	200000cc 	.word	0x200000cc
 8000788:	20000218 	.word	0x20000218

0800078c <TEST1_Init>:
 */
#include "main.h"
#include "tester.h"

void TEST1_Init(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
	// Test Pin 1 on PC8
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <TEST1_Init+0x28>)
 8000792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <TEST1_Init+0x28>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE8_1);
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <TEST1_Init+0x2c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <TEST1_Init+0x2c>)
 80007a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800

080007bc <TEST1_Off>:
{
	GPIOC->BSRR = GPIO_BSRR_BS8;
}

__attribute__((always_inline)) inline void TEST1_Off(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BR8;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <TEST1_Off+0x18>)
 80007c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007c6:	619a      	str	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	48000800 	.word	0x48000800

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000806:	f000 f837 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fe25 	bl	8000458 <main>

0800080e <LoopForever>:

LoopForever:
  b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800081c:	080011d4 	.word	0x080011d4
  ldr r2, =_sbss
 8000820:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000824:	20000218 	.word	0x20000218

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <siprintf>:
 800082c:	b40e      	push	{r1, r2, r3}
 800082e:	b500      	push	{lr}
 8000830:	b09c      	sub	sp, #112	; 0x70
 8000832:	ab1d      	add	r3, sp, #116	; 0x74
 8000834:	9002      	str	r0, [sp, #8]
 8000836:	9006      	str	r0, [sp, #24]
 8000838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <siprintf+0x38>)
 800083e:	9107      	str	r1, [sp, #28]
 8000840:	9104      	str	r1, [sp, #16]
 8000842:	4909      	ldr	r1, [pc, #36]	; (8000868 <siprintf+0x3c>)
 8000844:	f853 2b04 	ldr.w	r2, [r3], #4
 8000848:	9105      	str	r1, [sp, #20]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	a902      	add	r1, sp, #8
 8000850:	f000 f98a 	bl	8000b68 <_svfiprintf_r>
 8000854:	9b02      	ldr	r3, [sp, #8]
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	b01c      	add	sp, #112	; 0x70
 800085c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000860:	b003      	add	sp, #12
 8000862:	4770      	bx	lr
 8000864:	2000004c 	.word	0x2000004c
 8000868:	ffff0208 	.word	0xffff0208

0800086c <__errno>:
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <__errno+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2000004c 	.word	0x2000004c

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4d0d      	ldr	r5, [pc, #52]	; (80008b0 <__libc_init_array+0x38>)
 800087c:	4c0d      	ldr	r4, [pc, #52]	; (80008b4 <__libc_init_array+0x3c>)
 800087e:	1b64      	subs	r4, r4, r5
 8000880:	10a4      	asrs	r4, r4, #2
 8000882:	2600      	movs	r6, #0
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	4d0b      	ldr	r5, [pc, #44]	; (80008b8 <__libc_init_array+0x40>)
 800088a:	4c0c      	ldr	r4, [pc, #48]	; (80008bc <__libc_init_array+0x44>)
 800088c:	f000 fc6a 	bl	8001164 <_init>
 8000890:	1b64      	subs	r4, r4, r5
 8000892:	10a4      	asrs	r4, r4, #2
 8000894:	2600      	movs	r6, #0
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	080011cc 	.word	0x080011cc
 80008b4:	080011cc 	.word	0x080011cc
 80008b8:	080011cc 	.word	0x080011cc
 80008bc:	080011d0 	.word	0x080011d0

080008c0 <__retarget_lock_acquire_recursive>:
 80008c0:	4770      	bx	lr

080008c2 <__retarget_lock_release_recursive>:
 80008c2:	4770      	bx	lr

080008c4 <_free_r>:
 80008c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d044      	beq.n	8000954 <_free_r+0x90>
 80008ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008ce:	9001      	str	r0, [sp, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f1a1 0404 	sub.w	r4, r1, #4
 80008d6:	bfb8      	it	lt
 80008d8:	18e4      	addlt	r4, r4, r3
 80008da:	f000 f8df 	bl	8000a9c <__malloc_lock>
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <_free_r+0x94>)
 80008e0:	9801      	ldr	r0, [sp, #4]
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	b933      	cbnz	r3, 80008f4 <_free_r+0x30>
 80008e6:	6063      	str	r3, [r4, #4]
 80008e8:	6014      	str	r4, [r2, #0]
 80008ea:	b003      	add	sp, #12
 80008ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80008f0:	f000 b8da 	b.w	8000aa8 <__malloc_unlock>
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d908      	bls.n	800090a <_free_r+0x46>
 80008f8:	6825      	ldr	r5, [r4, #0]
 80008fa:	1961      	adds	r1, r4, r5
 80008fc:	428b      	cmp	r3, r1
 80008fe:	bf01      	itttt	eq
 8000900:	6819      	ldreq	r1, [r3, #0]
 8000902:	685b      	ldreq	r3, [r3, #4]
 8000904:	1949      	addeq	r1, r1, r5
 8000906:	6021      	streq	r1, [r4, #0]
 8000908:	e7ed      	b.n	80008e6 <_free_r+0x22>
 800090a:	461a      	mov	r2, r3
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	b10b      	cbz	r3, 8000914 <_free_r+0x50>
 8000910:	42a3      	cmp	r3, r4
 8000912:	d9fa      	bls.n	800090a <_free_r+0x46>
 8000914:	6811      	ldr	r1, [r2, #0]
 8000916:	1855      	adds	r5, r2, r1
 8000918:	42a5      	cmp	r5, r4
 800091a:	d10b      	bne.n	8000934 <_free_r+0x70>
 800091c:	6824      	ldr	r4, [r4, #0]
 800091e:	4421      	add	r1, r4
 8000920:	1854      	adds	r4, r2, r1
 8000922:	42a3      	cmp	r3, r4
 8000924:	6011      	str	r1, [r2, #0]
 8000926:	d1e0      	bne.n	80008ea <_free_r+0x26>
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	6053      	str	r3, [r2, #4]
 800092e:	440c      	add	r4, r1
 8000930:	6014      	str	r4, [r2, #0]
 8000932:	e7da      	b.n	80008ea <_free_r+0x26>
 8000934:	d902      	bls.n	800093c <_free_r+0x78>
 8000936:	230c      	movs	r3, #12
 8000938:	6003      	str	r3, [r0, #0]
 800093a:	e7d6      	b.n	80008ea <_free_r+0x26>
 800093c:	6825      	ldr	r5, [r4, #0]
 800093e:	1961      	adds	r1, r4, r5
 8000940:	428b      	cmp	r3, r1
 8000942:	bf04      	itt	eq
 8000944:	6819      	ldreq	r1, [r3, #0]
 8000946:	685b      	ldreq	r3, [r3, #4]
 8000948:	6063      	str	r3, [r4, #4]
 800094a:	bf04      	itt	eq
 800094c:	1949      	addeq	r1, r1, r5
 800094e:	6021      	streq	r1, [r4, #0]
 8000950:	6054      	str	r4, [r2, #4]
 8000952:	e7ca      	b.n	80008ea <_free_r+0x26>
 8000954:	b003      	add	sp, #12
 8000956:	bd30      	pop	{r4, r5, pc}
 8000958:	20000210 	.word	0x20000210

0800095c <sbrk_aligned>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0e      	ldr	r6, [pc, #56]	; (8000998 <sbrk_aligned+0x3c>)
 8000960:	460c      	mov	r4, r1
 8000962:	6831      	ldr	r1, [r6, #0]
 8000964:	4605      	mov	r5, r0
 8000966:	b911      	cbnz	r1, 800096e <sbrk_aligned+0x12>
 8000968:	f000 fba6 	bl	80010b8 <_sbrk_r>
 800096c:	6030      	str	r0, [r6, #0]
 800096e:	4621      	mov	r1, r4
 8000970:	4628      	mov	r0, r5
 8000972:	f000 fba1 	bl	80010b8 <_sbrk_r>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	d00a      	beq.n	8000990 <sbrk_aligned+0x34>
 800097a:	1cc4      	adds	r4, r0, #3
 800097c:	f024 0403 	bic.w	r4, r4, #3
 8000980:	42a0      	cmp	r0, r4
 8000982:	d007      	beq.n	8000994 <sbrk_aligned+0x38>
 8000984:	1a21      	subs	r1, r4, r0
 8000986:	4628      	mov	r0, r5
 8000988:	f000 fb96 	bl	80010b8 <_sbrk_r>
 800098c:	3001      	adds	r0, #1
 800098e:	d101      	bne.n	8000994 <sbrk_aligned+0x38>
 8000990:	f04f 34ff 	mov.w	r4, #4294967295
 8000994:	4620      	mov	r0, r4
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	20000214 	.word	0x20000214

0800099c <_malloc_r>:
 800099c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a0:	1ccd      	adds	r5, r1, #3
 80009a2:	f025 0503 	bic.w	r5, r5, #3
 80009a6:	3508      	adds	r5, #8
 80009a8:	2d0c      	cmp	r5, #12
 80009aa:	bf38      	it	cc
 80009ac:	250c      	movcc	r5, #12
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	4607      	mov	r7, r0
 80009b2:	db01      	blt.n	80009b8 <_malloc_r+0x1c>
 80009b4:	42a9      	cmp	r1, r5
 80009b6:	d905      	bls.n	80009c4 <_malloc_r+0x28>
 80009b8:	230c      	movs	r3, #12
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	2600      	movs	r6, #0
 80009be:	4630      	mov	r0, r6
 80009c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a98 <_malloc_r+0xfc>
 80009c8:	f000 f868 	bl	8000a9c <__malloc_lock>
 80009cc:	f8d8 3000 	ldr.w	r3, [r8]
 80009d0:	461c      	mov	r4, r3
 80009d2:	bb5c      	cbnz	r4, 8000a2c <_malloc_r+0x90>
 80009d4:	4629      	mov	r1, r5
 80009d6:	4638      	mov	r0, r7
 80009d8:	f7ff ffc0 	bl	800095c <sbrk_aligned>
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	4604      	mov	r4, r0
 80009e0:	d155      	bne.n	8000a8e <_malloc_r+0xf2>
 80009e2:	f8d8 4000 	ldr.w	r4, [r8]
 80009e6:	4626      	mov	r6, r4
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	d145      	bne.n	8000a78 <_malloc_r+0xdc>
 80009ec:	2c00      	cmp	r4, #0
 80009ee:	d048      	beq.n	8000a82 <_malloc_r+0xe6>
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	4631      	mov	r1, r6
 80009f4:	4638      	mov	r0, r7
 80009f6:	eb04 0903 	add.w	r9, r4, r3
 80009fa:	f000 fb5d 	bl	80010b8 <_sbrk_r>
 80009fe:	4581      	cmp	r9, r0
 8000a00:	d13f      	bne.n	8000a82 <_malloc_r+0xe6>
 8000a02:	6821      	ldr	r1, [r4, #0]
 8000a04:	1a6d      	subs	r5, r5, r1
 8000a06:	4629      	mov	r1, r5
 8000a08:	4638      	mov	r0, r7
 8000a0a:	f7ff ffa7 	bl	800095c <sbrk_aligned>
 8000a0e:	3001      	adds	r0, #1
 8000a10:	d037      	beq.n	8000a82 <_malloc_r+0xe6>
 8000a12:	6823      	ldr	r3, [r4, #0]
 8000a14:	442b      	add	r3, r5
 8000a16:	6023      	str	r3, [r4, #0]
 8000a18:	f8d8 3000 	ldr.w	r3, [r8]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d038      	beq.n	8000a92 <_malloc_r+0xf6>
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	42a2      	cmp	r2, r4
 8000a24:	d12b      	bne.n	8000a7e <_malloc_r+0xe2>
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	e00f      	b.n	8000a4c <_malloc_r+0xb0>
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	1b52      	subs	r2, r2, r5
 8000a30:	d41f      	bmi.n	8000a72 <_malloc_r+0xd6>
 8000a32:	2a0b      	cmp	r2, #11
 8000a34:	d917      	bls.n	8000a66 <_malloc_r+0xca>
 8000a36:	1961      	adds	r1, r4, r5
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	6025      	str	r5, [r4, #0]
 8000a3c:	bf18      	it	ne
 8000a3e:	6059      	strne	r1, [r3, #4]
 8000a40:	6863      	ldr	r3, [r4, #4]
 8000a42:	bf08      	it	eq
 8000a44:	f8c8 1000 	streq.w	r1, [r8]
 8000a48:	5162      	str	r2, [r4, r5]
 8000a4a:	604b      	str	r3, [r1, #4]
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	f104 060b 	add.w	r6, r4, #11
 8000a52:	f000 f829 	bl	8000aa8 <__malloc_unlock>
 8000a56:	f026 0607 	bic.w	r6, r6, #7
 8000a5a:	1d23      	adds	r3, r4, #4
 8000a5c:	1af2      	subs	r2, r6, r3
 8000a5e:	d0ae      	beq.n	80009be <_malloc_r+0x22>
 8000a60:	1b9b      	subs	r3, r3, r6
 8000a62:	50a3      	str	r3, [r4, r2]
 8000a64:	e7ab      	b.n	80009be <_malloc_r+0x22>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	6862      	ldr	r2, [r4, #4]
 8000a6a:	d1dd      	bne.n	8000a28 <_malloc_r+0x8c>
 8000a6c:	f8c8 2000 	str.w	r2, [r8]
 8000a70:	e7ec      	b.n	8000a4c <_malloc_r+0xb0>
 8000a72:	4623      	mov	r3, r4
 8000a74:	6864      	ldr	r4, [r4, #4]
 8000a76:	e7ac      	b.n	80009d2 <_malloc_r+0x36>
 8000a78:	4634      	mov	r4, r6
 8000a7a:	6876      	ldr	r6, [r6, #4]
 8000a7c:	e7b4      	b.n	80009e8 <_malloc_r+0x4c>
 8000a7e:	4613      	mov	r3, r2
 8000a80:	e7cc      	b.n	8000a1c <_malloc_r+0x80>
 8000a82:	230c      	movs	r3, #12
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4638      	mov	r0, r7
 8000a88:	f000 f80e 	bl	8000aa8 <__malloc_unlock>
 8000a8c:	e797      	b.n	80009be <_malloc_r+0x22>
 8000a8e:	6025      	str	r5, [r4, #0]
 8000a90:	e7dc      	b.n	8000a4c <_malloc_r+0xb0>
 8000a92:	605b      	str	r3, [r3, #4]
 8000a94:	deff      	udf	#255	; 0xff
 8000a96:	bf00      	nop
 8000a98:	20000210 	.word	0x20000210

08000a9c <__malloc_lock>:
 8000a9c:	4801      	ldr	r0, [pc, #4]	; (8000aa4 <__malloc_lock+0x8>)
 8000a9e:	f7ff bf0f 	b.w	80008c0 <__retarget_lock_acquire_recursive>
 8000aa2:	bf00      	nop
 8000aa4:	2000020c 	.word	0x2000020c

08000aa8 <__malloc_unlock>:
 8000aa8:	4801      	ldr	r0, [pc, #4]	; (8000ab0 <__malloc_unlock+0x8>)
 8000aaa:	f7ff bf0a 	b.w	80008c2 <__retarget_lock_release_recursive>
 8000aae:	bf00      	nop
 8000ab0:	2000020c 	.word	0x2000020c

08000ab4 <__ssputs_r>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	688e      	ldr	r6, [r1, #8]
 8000aba:	461f      	mov	r7, r3
 8000abc:	42be      	cmp	r6, r7
 8000abe:	680b      	ldr	r3, [r1, #0]
 8000ac0:	4682      	mov	sl, r0
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	d82c      	bhi.n	8000b22 <__ssputs_r+0x6e>
 8000ac8:	898a      	ldrh	r2, [r1, #12]
 8000aca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ace:	d026      	beq.n	8000b1e <__ssputs_r+0x6a>
 8000ad0:	6965      	ldr	r5, [r4, #20]
 8000ad2:	6909      	ldr	r1, [r1, #16]
 8000ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ad8:	eba3 0901 	sub.w	r9, r3, r1
 8000adc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ae0:	1c7b      	adds	r3, r7, #1
 8000ae2:	444b      	add	r3, r9
 8000ae4:	106d      	asrs	r5, r5, #1
 8000ae6:	429d      	cmp	r5, r3
 8000ae8:	bf38      	it	cc
 8000aea:	461d      	movcc	r5, r3
 8000aec:	0553      	lsls	r3, r2, #21
 8000aee:	d527      	bpl.n	8000b40 <__ssputs_r+0x8c>
 8000af0:	4629      	mov	r1, r5
 8000af2:	f7ff ff53 	bl	800099c <_malloc_r>
 8000af6:	4606      	mov	r6, r0
 8000af8:	b360      	cbz	r0, 8000b54 <__ssputs_r+0xa0>
 8000afa:	6921      	ldr	r1, [r4, #16]
 8000afc:	464a      	mov	r2, r9
 8000afe:	f000 faeb 	bl	80010d8 <memcpy>
 8000b02:	89a3      	ldrh	r3, [r4, #12]
 8000b04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	81a3      	strh	r3, [r4, #12]
 8000b0e:	6126      	str	r6, [r4, #16]
 8000b10:	6165      	str	r5, [r4, #20]
 8000b12:	444e      	add	r6, r9
 8000b14:	eba5 0509 	sub.w	r5, r5, r9
 8000b18:	6026      	str	r6, [r4, #0]
 8000b1a:	60a5      	str	r5, [r4, #8]
 8000b1c:	463e      	mov	r6, r7
 8000b1e:	42be      	cmp	r6, r7
 8000b20:	d900      	bls.n	8000b24 <__ssputs_r+0x70>
 8000b22:	463e      	mov	r6, r7
 8000b24:	6820      	ldr	r0, [r4, #0]
 8000b26:	4632      	mov	r2, r6
 8000b28:	4641      	mov	r1, r8
 8000b2a:	f000 faab 	bl	8001084 <memmove>
 8000b2e:	68a3      	ldr	r3, [r4, #8]
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	60a3      	str	r3, [r4, #8]
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	4433      	add	r3, r6
 8000b38:	6023      	str	r3, [r4, #0]
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	462a      	mov	r2, r5
 8000b42:	f000 fad7 	bl	80010f4 <_realloc_r>
 8000b46:	4606      	mov	r6, r0
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1e0      	bne.n	8000b0e <__ssputs_r+0x5a>
 8000b4c:	6921      	ldr	r1, [r4, #16]
 8000b4e:	4650      	mov	r0, sl
 8000b50:	f7ff feb8 	bl	80008c4 <_free_r>
 8000b54:	230c      	movs	r3, #12
 8000b56:	f8ca 3000 	str.w	r3, [sl]
 8000b5a:	89a3      	ldrh	r3, [r4, #12]
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	81a3      	strh	r3, [r4, #12]
 8000b62:	f04f 30ff 	mov.w	r0, #4294967295
 8000b66:	e7e9      	b.n	8000b3c <__ssputs_r+0x88>

08000b68 <_svfiprintf_r>:
 8000b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	898b      	ldrh	r3, [r1, #12]
 8000b70:	061b      	lsls	r3, r3, #24
 8000b72:	b09d      	sub	sp, #116	; 0x74
 8000b74:	4607      	mov	r7, r0
 8000b76:	460d      	mov	r5, r1
 8000b78:	4614      	mov	r4, r2
 8000b7a:	d50e      	bpl.n	8000b9a <_svfiprintf_r+0x32>
 8000b7c:	690b      	ldr	r3, [r1, #16]
 8000b7e:	b963      	cbnz	r3, 8000b9a <_svfiprintf_r+0x32>
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	f7ff ff0b 	bl	800099c <_malloc_r>
 8000b86:	6028      	str	r0, [r5, #0]
 8000b88:	6128      	str	r0, [r5, #16]
 8000b8a:	b920      	cbnz	r0, 8000b96 <_svfiprintf_r+0x2e>
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	e0d0      	b.n	8000d38 <_svfiprintf_r+0x1d0>
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	616b      	str	r3, [r5, #20]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ba8:	2330      	movs	r3, #48	; 0x30
 8000baa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000d50 <_svfiprintf_r+0x1e8>
 8000bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bb2:	f04f 0901 	mov.w	r9, #1
 8000bb6:	4623      	mov	r3, r4
 8000bb8:	469a      	mov	sl, r3
 8000bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bbe:	b10a      	cbz	r2, 8000bc4 <_svfiprintf_r+0x5c>
 8000bc0:	2a25      	cmp	r2, #37	; 0x25
 8000bc2:	d1f9      	bne.n	8000bb8 <_svfiprintf_r+0x50>
 8000bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8000bc8:	d00b      	beq.n	8000be2 <_svfiprintf_r+0x7a>
 8000bca:	465b      	mov	r3, fp
 8000bcc:	4622      	mov	r2, r4
 8000bce:	4629      	mov	r1, r5
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	f7ff ff6f 	bl	8000ab4 <__ssputs_r>
 8000bd6:	3001      	adds	r0, #1
 8000bd8:	f000 80a9 	beq.w	8000d2e <_svfiprintf_r+0x1c6>
 8000bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bde:	445a      	add	r2, fp
 8000be0:	9209      	str	r2, [sp, #36]	; 0x24
 8000be2:	f89a 3000 	ldrb.w	r3, [sl]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 80a1 	beq.w	8000d2e <_svfiprintf_r+0x1c6>
 8000bec:	2300      	movs	r3, #0
 8000bee:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bf6:	f10a 0a01 	add.w	sl, sl, #1
 8000bfa:	9304      	str	r3, [sp, #16]
 8000bfc:	9307      	str	r3, [sp, #28]
 8000bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c02:	931a      	str	r3, [sp, #104]	; 0x68
 8000c04:	4654      	mov	r4, sl
 8000c06:	2205      	movs	r2, #5
 8000c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0c:	4850      	ldr	r0, [pc, #320]	; (8000d50 <_svfiprintf_r+0x1e8>)
 8000c0e:	f7ff fb07 	bl	8000220 <memchr>
 8000c12:	9a04      	ldr	r2, [sp, #16]
 8000c14:	b9d8      	cbnz	r0, 8000c4e <_svfiprintf_r+0xe6>
 8000c16:	06d0      	lsls	r0, r2, #27
 8000c18:	bf44      	itt	mi
 8000c1a:	2320      	movmi	r3, #32
 8000c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c20:	0711      	lsls	r1, r2, #28
 8000c22:	bf44      	itt	mi
 8000c24:	232b      	movmi	r3, #43	; 0x2b
 8000c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000c30:	d015      	beq.n	8000c5e <_svfiprintf_r+0xf6>
 8000c32:	9a07      	ldr	r2, [sp, #28]
 8000c34:	4654      	mov	r4, sl
 8000c36:	2000      	movs	r0, #0
 8000c38:	f04f 0c0a 	mov.w	ip, #10
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c42:	3b30      	subs	r3, #48	; 0x30
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d94d      	bls.n	8000ce4 <_svfiprintf_r+0x17c>
 8000c48:	b1b0      	cbz	r0, 8000c78 <_svfiprintf_r+0x110>
 8000c4a:	9207      	str	r2, [sp, #28]
 8000c4c:	e014      	b.n	8000c78 <_svfiprintf_r+0x110>
 8000c4e:	eba0 0308 	sub.w	r3, r0, r8
 8000c52:	fa09 f303 	lsl.w	r3, r9, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	9304      	str	r3, [sp, #16]
 8000c5a:	46a2      	mov	sl, r4
 8000c5c:	e7d2      	b.n	8000c04 <_svfiprintf_r+0x9c>
 8000c5e:	9b03      	ldr	r3, [sp, #12]
 8000c60:	1d19      	adds	r1, r3, #4
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	9103      	str	r1, [sp, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bfbb      	ittet	lt
 8000c6a:	425b      	neglt	r3, r3
 8000c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8000c70:	9307      	strge	r3, [sp, #28]
 8000c72:	9307      	strlt	r3, [sp, #28]
 8000c74:	bfb8      	it	lt
 8000c76:	9204      	strlt	r2, [sp, #16]
 8000c78:	7823      	ldrb	r3, [r4, #0]
 8000c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8000c7c:	d10c      	bne.n	8000c98 <_svfiprintf_r+0x130>
 8000c7e:	7863      	ldrb	r3, [r4, #1]
 8000c80:	2b2a      	cmp	r3, #42	; 0x2a
 8000c82:	d134      	bne.n	8000cee <_svfiprintf_r+0x186>
 8000c84:	9b03      	ldr	r3, [sp, #12]
 8000c86:	1d1a      	adds	r2, r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	9203      	str	r2, [sp, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bfb8      	it	lt
 8000c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c94:	3402      	adds	r4, #2
 8000c96:	9305      	str	r3, [sp, #20]
 8000c98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000d60 <_svfiprintf_r+0x1f8>
 8000c9c:	7821      	ldrb	r1, [r4, #0]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4650      	mov	r0, sl
 8000ca2:	f7ff fabd 	bl	8000220 <memchr>
 8000ca6:	b138      	cbz	r0, 8000cb8 <_svfiprintf_r+0x150>
 8000ca8:	9b04      	ldr	r3, [sp, #16]
 8000caa:	eba0 000a 	sub.w	r0, r0, sl
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	4082      	lsls	r2, r0
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	3401      	adds	r4, #1
 8000cb6:	9304      	str	r3, [sp, #16]
 8000cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cbc:	4825      	ldr	r0, [pc, #148]	; (8000d54 <_svfiprintf_r+0x1ec>)
 8000cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	f7ff faac 	bl	8000220 <memchr>
 8000cc8:	2800      	cmp	r0, #0
 8000cca:	d038      	beq.n	8000d3e <_svfiprintf_r+0x1d6>
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <_svfiprintf_r+0x1f0>)
 8000cce:	bb1b      	cbnz	r3, 8000d18 <_svfiprintf_r+0x1b0>
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	3307      	adds	r3, #7
 8000cd4:	f023 0307 	bic.w	r3, r3, #7
 8000cd8:	3308      	adds	r3, #8
 8000cda:	9303      	str	r3, [sp, #12]
 8000cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cde:	4433      	add	r3, r6
 8000ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8000ce2:	e768      	b.n	8000bb6 <_svfiprintf_r+0x4e>
 8000ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ce8:	460c      	mov	r4, r1
 8000cea:	2001      	movs	r0, #1
 8000cec:	e7a6      	b.n	8000c3c <_svfiprintf_r+0xd4>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	3401      	adds	r4, #1
 8000cf2:	9305      	str	r3, [sp, #20]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 0c0a 	mov.w	ip, #10
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d00:	3a30      	subs	r2, #48	; 0x30
 8000d02:	2a09      	cmp	r2, #9
 8000d04:	d903      	bls.n	8000d0e <_svfiprintf_r+0x1a6>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0c6      	beq.n	8000c98 <_svfiprintf_r+0x130>
 8000d0a:	9105      	str	r1, [sp, #20]
 8000d0c:	e7c4      	b.n	8000c98 <_svfiprintf_r+0x130>
 8000d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d12:	4604      	mov	r4, r0
 8000d14:	2301      	movs	r3, #1
 8000d16:	e7f0      	b.n	8000cfa <_svfiprintf_r+0x192>
 8000d18:	ab03      	add	r3, sp, #12
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	462a      	mov	r2, r5
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <_svfiprintf_r+0x1f4>)
 8000d20:	a904      	add	r1, sp, #16
 8000d22:	4638      	mov	r0, r7
 8000d24:	f3af 8000 	nop.w
 8000d28:	1c42      	adds	r2, r0, #1
 8000d2a:	4606      	mov	r6, r0
 8000d2c:	d1d6      	bne.n	8000cdc <_svfiprintf_r+0x174>
 8000d2e:	89ab      	ldrh	r3, [r5, #12]
 8000d30:	065b      	lsls	r3, r3, #25
 8000d32:	f53f af2d 	bmi.w	8000b90 <_svfiprintf_r+0x28>
 8000d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d38:	b01d      	add	sp, #116	; 0x74
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3e:	ab03      	add	r3, sp, #12
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	462a      	mov	r2, r5
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_svfiprintf_r+0x1f4>)
 8000d46:	a904      	add	r1, sp, #16
 8000d48:	4638      	mov	r0, r7
 8000d4a:	f000 f879 	bl	8000e40 <_printf_i>
 8000d4e:	e7eb      	b.n	8000d28 <_svfiprintf_r+0x1c0>
 8000d50:	08001197 	.word	0x08001197
 8000d54:	080011a1 	.word	0x080011a1
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	08000ab5 	.word	0x08000ab5
 8000d60:	0800119d 	.word	0x0800119d

08000d64 <_printf_common>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	4616      	mov	r6, r2
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	688a      	ldr	r2, [r1, #8]
 8000d6e:	690b      	ldr	r3, [r1, #16]
 8000d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d74:	4293      	cmp	r3, r2
 8000d76:	bfb8      	it	lt
 8000d78:	4613      	movlt	r3, r2
 8000d7a:	6033      	str	r3, [r6, #0]
 8000d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d80:	4607      	mov	r7, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	b10a      	cbz	r2, 8000d8a <_printf_common+0x26>
 8000d86:	3301      	adds	r3, #1
 8000d88:	6033      	str	r3, [r6, #0]
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	0699      	lsls	r1, r3, #26
 8000d8e:	bf42      	ittt	mi
 8000d90:	6833      	ldrmi	r3, [r6, #0]
 8000d92:	3302      	addmi	r3, #2
 8000d94:	6033      	strmi	r3, [r6, #0]
 8000d96:	6825      	ldr	r5, [r4, #0]
 8000d98:	f015 0506 	ands.w	r5, r5, #6
 8000d9c:	d106      	bne.n	8000dac <_printf_common+0x48>
 8000d9e:	f104 0a19 	add.w	sl, r4, #25
 8000da2:	68e3      	ldr	r3, [r4, #12]
 8000da4:	6832      	ldr	r2, [r6, #0]
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	dc26      	bgt.n	8000dfa <_printf_common+0x96>
 8000dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000db0:	1e13      	subs	r3, r2, #0
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	bf18      	it	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	0692      	lsls	r2, r2, #26
 8000dba:	d42b      	bmi.n	8000e14 <_printf_common+0xb0>
 8000dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	47c0      	blx	r8
 8000dc6:	3001      	adds	r0, #1
 8000dc8:	d01e      	beq.n	8000e08 <_printf_common+0xa4>
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	6922      	ldr	r2, [r4, #16]
 8000dce:	f003 0306 	and.w	r3, r3, #6
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf02      	ittt	eq
 8000dd6:	68e5      	ldreq	r5, [r4, #12]
 8000dd8:	6833      	ldreq	r3, [r6, #0]
 8000dda:	1aed      	subeq	r5, r5, r3
 8000ddc:	68a3      	ldr	r3, [r4, #8]
 8000dde:	bf0c      	ite	eq
 8000de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000de4:	2500      	movne	r5, #0
 8000de6:	4293      	cmp	r3, r2
 8000de8:	bfc4      	itt	gt
 8000dea:	1a9b      	subgt	r3, r3, r2
 8000dec:	18ed      	addgt	r5, r5, r3
 8000dee:	2600      	movs	r6, #0
 8000df0:	341a      	adds	r4, #26
 8000df2:	42b5      	cmp	r5, r6
 8000df4:	d11a      	bne.n	8000e2c <_printf_common+0xc8>
 8000df6:	2000      	movs	r0, #0
 8000df8:	e008      	b.n	8000e0c <_printf_common+0xa8>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4652      	mov	r2, sl
 8000dfe:	4649      	mov	r1, r9
 8000e00:	4638      	mov	r0, r7
 8000e02:	47c0      	blx	r8
 8000e04:	3001      	adds	r0, #1
 8000e06:	d103      	bne.n	8000e10 <_printf_common+0xac>
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	3501      	adds	r5, #1
 8000e12:	e7c6      	b.n	8000da2 <_printf_common+0x3e>
 8000e14:	18e1      	adds	r1, r4, r3
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	2030      	movs	r0, #48	; 0x30
 8000e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e1e:	4422      	add	r2, r4
 8000e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e28:	3302      	adds	r3, #2
 8000e2a:	e7c7      	b.n	8000dbc <_printf_common+0x58>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4622      	mov	r2, r4
 8000e30:	4649      	mov	r1, r9
 8000e32:	4638      	mov	r0, r7
 8000e34:	47c0      	blx	r8
 8000e36:	3001      	adds	r0, #1
 8000e38:	d0e6      	beq.n	8000e08 <_printf_common+0xa4>
 8000e3a:	3601      	adds	r6, #1
 8000e3c:	e7d9      	b.n	8000df2 <_printf_common+0x8e>
	...

08000e40 <_printf_i>:
 8000e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	7e0f      	ldrb	r7, [r1, #24]
 8000e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e48:	2f78      	cmp	r7, #120	; 0x78
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	4680      	mov	r8, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	469a      	mov	sl, r3
 8000e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e56:	d807      	bhi.n	8000e68 <_printf_i+0x28>
 8000e58:	2f62      	cmp	r7, #98	; 0x62
 8000e5a:	d80a      	bhi.n	8000e72 <_printf_i+0x32>
 8000e5c:	2f00      	cmp	r7, #0
 8000e5e:	f000 80d4 	beq.w	800100a <_printf_i+0x1ca>
 8000e62:	2f58      	cmp	r7, #88	; 0x58
 8000e64:	f000 80c0 	beq.w	8000fe8 <_printf_i+0x1a8>
 8000e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e70:	e03a      	b.n	8000ee8 <_printf_i+0xa8>
 8000e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e76:	2b15      	cmp	r3, #21
 8000e78:	d8f6      	bhi.n	8000e68 <_printf_i+0x28>
 8000e7a:	a101      	add	r1, pc, #4	; (adr r1, 8000e80 <_printf_i+0x40>)
 8000e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e80:	08000ed9 	.word	0x08000ed9
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000e69 	.word	0x08000e69
 8000e8c:	08000e69 	.word	0x08000e69
 8000e90:	08000e69 	.word	0x08000e69
 8000e94:	08000e69 	.word	0x08000e69
 8000e98:	08000eed 	.word	0x08000eed
 8000e9c:	08000e69 	.word	0x08000e69
 8000ea0:	08000e69 	.word	0x08000e69
 8000ea4:	08000e69 	.word	0x08000e69
 8000ea8:	08000e69 	.word	0x08000e69
 8000eac:	08000ff1 	.word	0x08000ff1
 8000eb0:	08000f19 	.word	0x08000f19
 8000eb4:	08000fab 	.word	0x08000fab
 8000eb8:	08000e69 	.word	0x08000e69
 8000ebc:	08000e69 	.word	0x08000e69
 8000ec0:	08001013 	.word	0x08001013
 8000ec4:	08000e69 	.word	0x08000e69
 8000ec8:	08000f19 	.word	0x08000f19
 8000ecc:	08000e69 	.word	0x08000e69
 8000ed0:	08000e69 	.word	0x08000e69
 8000ed4:	08000fb3 	.word	0x08000fb3
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	1d1a      	adds	r2, r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	602a      	str	r2, [r5, #0]
 8000ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e09f      	b.n	800102c <_printf_i+0x1ec>
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	0607      	lsls	r7, r0, #24
 8000ef2:	f103 0104 	add.w	r1, r3, #4
 8000ef6:	6029      	str	r1, [r5, #0]
 8000ef8:	d501      	bpl.n	8000efe <_printf_i+0xbe>
 8000efa:	681e      	ldr	r6, [r3, #0]
 8000efc:	e003      	b.n	8000f06 <_printf_i+0xc6>
 8000efe:	0646      	lsls	r6, r0, #25
 8000f00:	d5fb      	bpl.n	8000efa <_printf_i+0xba>
 8000f02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	da03      	bge.n	8000f12 <_printf_i+0xd2>
 8000f0a:	232d      	movs	r3, #45	; 0x2d
 8000f0c:	4276      	negs	r6, r6
 8000f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f12:	485a      	ldr	r0, [pc, #360]	; (800107c <_printf_i+0x23c>)
 8000f14:	230a      	movs	r3, #10
 8000f16:	e012      	b.n	8000f3e <_printf_i+0xfe>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	1d19      	adds	r1, r3, #4
 8000f1e:	6029      	str	r1, [r5, #0]
 8000f20:	0605      	lsls	r5, r0, #24
 8000f22:	d501      	bpl.n	8000f28 <_printf_i+0xe8>
 8000f24:	681e      	ldr	r6, [r3, #0]
 8000f26:	e002      	b.n	8000f2e <_printf_i+0xee>
 8000f28:	0641      	lsls	r1, r0, #25
 8000f2a:	d5fb      	bpl.n	8000f24 <_printf_i+0xe4>
 8000f2c:	881e      	ldrh	r6, [r3, #0]
 8000f2e:	4853      	ldr	r0, [pc, #332]	; (800107c <_printf_i+0x23c>)
 8000f30:	2f6f      	cmp	r7, #111	; 0x6f
 8000f32:	bf0c      	ite	eq
 8000f34:	2308      	moveq	r3, #8
 8000f36:	230a      	movne	r3, #10
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f3e:	6865      	ldr	r5, [r4, #4]
 8000f40:	60a5      	str	r5, [r4, #8]
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	bfa2      	ittt	ge
 8000f46:	6821      	ldrge	r1, [r4, #0]
 8000f48:	f021 0104 	bicge.w	r1, r1, #4
 8000f4c:	6021      	strge	r1, [r4, #0]
 8000f4e:	b90e      	cbnz	r6, 8000f54 <_printf_i+0x114>
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	d04b      	beq.n	8000fec <_printf_i+0x1ac>
 8000f54:	4615      	mov	r5, r2
 8000f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8000f5e:	5dc7      	ldrb	r7, [r0, r7]
 8000f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f64:	4637      	mov	r7, r6
 8000f66:	42bb      	cmp	r3, r7
 8000f68:	460e      	mov	r6, r1
 8000f6a:	d9f4      	bls.n	8000f56 <_printf_i+0x116>
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	d10b      	bne.n	8000f88 <_printf_i+0x148>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	07de      	lsls	r6, r3, #31
 8000f74:	d508      	bpl.n	8000f88 <_printf_i+0x148>
 8000f76:	6923      	ldr	r3, [r4, #16]
 8000f78:	6861      	ldr	r1, [r4, #4]
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	bfde      	ittt	le
 8000f7e:	2330      	movle	r3, #48	; 0x30
 8000f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f88:	1b52      	subs	r2, r2, r5
 8000f8a:	6122      	str	r2, [r4, #16]
 8000f8c:	f8cd a000 	str.w	sl, [sp]
 8000f90:	464b      	mov	r3, r9
 8000f92:	aa03      	add	r2, sp, #12
 8000f94:	4621      	mov	r1, r4
 8000f96:	4640      	mov	r0, r8
 8000f98:	f7ff fee4 	bl	8000d64 <_printf_common>
 8000f9c:	3001      	adds	r0, #1
 8000f9e:	d14a      	bne.n	8001036 <_printf_i+0x1f6>
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	b004      	add	sp, #16
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	f043 0320 	orr.w	r3, r3, #32
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	4833      	ldr	r0, [pc, #204]	; (8001080 <_printf_i+0x240>)
 8000fb4:	2778      	movs	r7, #120	; 0x78
 8000fb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	6829      	ldr	r1, [r5, #0]
 8000fbe:	061f      	lsls	r7, r3, #24
 8000fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8000fc4:	d402      	bmi.n	8000fcc <_printf_i+0x18c>
 8000fc6:	065f      	lsls	r7, r3, #25
 8000fc8:	bf48      	it	mi
 8000fca:	b2b6      	uxthmi	r6, r6
 8000fcc:	07df      	lsls	r7, r3, #31
 8000fce:	bf48      	it	mi
 8000fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8000fd4:	6029      	str	r1, [r5, #0]
 8000fd6:	bf48      	it	mi
 8000fd8:	6023      	strmi	r3, [r4, #0]
 8000fda:	b91e      	cbnz	r6, 8000fe4 <_printf_i+0x1a4>
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	f023 0320 	bic.w	r3, r3, #32
 8000fe2:	6023      	str	r3, [r4, #0]
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	e7a7      	b.n	8000f38 <_printf_i+0xf8>
 8000fe8:	4824      	ldr	r0, [pc, #144]	; (800107c <_printf_i+0x23c>)
 8000fea:	e7e4      	b.n	8000fb6 <_printf_i+0x176>
 8000fec:	4615      	mov	r5, r2
 8000fee:	e7bd      	b.n	8000f6c <_printf_i+0x12c>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	6826      	ldr	r6, [r4, #0]
 8000ff4:	6961      	ldr	r1, [r4, #20]
 8000ff6:	1d18      	adds	r0, r3, #4
 8000ff8:	6028      	str	r0, [r5, #0]
 8000ffa:	0635      	lsls	r5, r6, #24
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	d501      	bpl.n	8001004 <_printf_i+0x1c4>
 8001000:	6019      	str	r1, [r3, #0]
 8001002:	e002      	b.n	800100a <_printf_i+0x1ca>
 8001004:	0670      	lsls	r0, r6, #25
 8001006:	d5fb      	bpl.n	8001000 <_printf_i+0x1c0>
 8001008:	8019      	strh	r1, [r3, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	6123      	str	r3, [r4, #16]
 800100e:	4615      	mov	r5, r2
 8001010:	e7bc      	b.n	8000f8c <_printf_i+0x14c>
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	1d1a      	adds	r2, r3, #4
 8001016:	602a      	str	r2, [r5, #0]
 8001018:	681d      	ldr	r5, [r3, #0]
 800101a:	6862      	ldr	r2, [r4, #4]
 800101c:	2100      	movs	r1, #0
 800101e:	4628      	mov	r0, r5
 8001020:	f7ff f8fe 	bl	8000220 <memchr>
 8001024:	b108      	cbz	r0, 800102a <_printf_i+0x1ea>
 8001026:	1b40      	subs	r0, r0, r5
 8001028:	6060      	str	r0, [r4, #4]
 800102a:	6863      	ldr	r3, [r4, #4]
 800102c:	6123      	str	r3, [r4, #16]
 800102e:	2300      	movs	r3, #0
 8001030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001034:	e7aa      	b.n	8000f8c <_printf_i+0x14c>
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	462a      	mov	r2, r5
 800103a:	4649      	mov	r1, r9
 800103c:	4640      	mov	r0, r8
 800103e:	47d0      	blx	sl
 8001040:	3001      	adds	r0, #1
 8001042:	d0ad      	beq.n	8000fa0 <_printf_i+0x160>
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	079b      	lsls	r3, r3, #30
 8001048:	d413      	bmi.n	8001072 <_printf_i+0x232>
 800104a:	68e0      	ldr	r0, [r4, #12]
 800104c:	9b03      	ldr	r3, [sp, #12]
 800104e:	4298      	cmp	r0, r3
 8001050:	bfb8      	it	lt
 8001052:	4618      	movlt	r0, r3
 8001054:	e7a6      	b.n	8000fa4 <_printf_i+0x164>
 8001056:	2301      	movs	r3, #1
 8001058:	4632      	mov	r2, r6
 800105a:	4649      	mov	r1, r9
 800105c:	4640      	mov	r0, r8
 800105e:	47d0      	blx	sl
 8001060:	3001      	adds	r0, #1
 8001062:	d09d      	beq.n	8000fa0 <_printf_i+0x160>
 8001064:	3501      	adds	r5, #1
 8001066:	68e3      	ldr	r3, [r4, #12]
 8001068:	9903      	ldr	r1, [sp, #12]
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	42ab      	cmp	r3, r5
 800106e:	dcf2      	bgt.n	8001056 <_printf_i+0x216>
 8001070:	e7eb      	b.n	800104a <_printf_i+0x20a>
 8001072:	2500      	movs	r5, #0
 8001074:	f104 0619 	add.w	r6, r4, #25
 8001078:	e7f5      	b.n	8001066 <_printf_i+0x226>
 800107a:	bf00      	nop
 800107c:	080011a8 	.word	0x080011a8
 8001080:	080011b9 	.word	0x080011b9

08001084 <memmove>:
 8001084:	4288      	cmp	r0, r1
 8001086:	b510      	push	{r4, lr}
 8001088:	eb01 0402 	add.w	r4, r1, r2
 800108c:	d902      	bls.n	8001094 <memmove+0x10>
 800108e:	4284      	cmp	r4, r0
 8001090:	4623      	mov	r3, r4
 8001092:	d807      	bhi.n	80010a4 <memmove+0x20>
 8001094:	1e43      	subs	r3, r0, #1
 8001096:	42a1      	cmp	r1, r4
 8001098:	d008      	beq.n	80010ac <memmove+0x28>
 800109a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800109e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010a2:	e7f8      	b.n	8001096 <memmove+0x12>
 80010a4:	4402      	add	r2, r0
 80010a6:	4601      	mov	r1, r0
 80010a8:	428a      	cmp	r2, r1
 80010aa:	d100      	bne.n	80010ae <memmove+0x2a>
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010b6:	e7f7      	b.n	80010a8 <memmove+0x24>

080010b8 <_sbrk_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d06      	ldr	r5, [pc, #24]	; (80010d4 <_sbrk_r+0x1c>)
 80010bc:	2300      	movs	r3, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4608      	mov	r0, r1
 80010c2:	602b      	str	r3, [r5, #0]
 80010c4:	f7ff fb2c 	bl	8000720 <_sbrk>
 80010c8:	1c43      	adds	r3, r0, #1
 80010ca:	d102      	bne.n	80010d2 <_sbrk_r+0x1a>
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	b103      	cbz	r3, 80010d2 <_sbrk_r+0x1a>
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
 80010d4:	20000208 	.word	0x20000208

080010d8 <memcpy>:
 80010d8:	440a      	add	r2, r1
 80010da:	4291      	cmp	r1, r2
 80010dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80010e0:	d100      	bne.n	80010e4 <memcpy+0xc>
 80010e2:	4770      	bx	lr
 80010e4:	b510      	push	{r4, lr}
 80010e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010ee:	4291      	cmp	r1, r2
 80010f0:	d1f9      	bne.n	80010e6 <memcpy+0xe>
 80010f2:	bd10      	pop	{r4, pc}

080010f4 <_realloc_r>:
 80010f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f8:	4680      	mov	r8, r0
 80010fa:	4614      	mov	r4, r2
 80010fc:	460e      	mov	r6, r1
 80010fe:	b921      	cbnz	r1, 800110a <_realloc_r+0x16>
 8001100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001104:	4611      	mov	r1, r2
 8001106:	f7ff bc49 	b.w	800099c <_malloc_r>
 800110a:	b92a      	cbnz	r2, 8001118 <_realloc_r+0x24>
 800110c:	f7ff fbda 	bl	80008c4 <_free_r>
 8001110:	4625      	mov	r5, r4
 8001112:	4628      	mov	r0, r5
 8001114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001118:	f000 f81b 	bl	8001152 <_malloc_usable_size_r>
 800111c:	4284      	cmp	r4, r0
 800111e:	4607      	mov	r7, r0
 8001120:	d802      	bhi.n	8001128 <_realloc_r+0x34>
 8001122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001126:	d812      	bhi.n	800114e <_realloc_r+0x5a>
 8001128:	4621      	mov	r1, r4
 800112a:	4640      	mov	r0, r8
 800112c:	f7ff fc36 	bl	800099c <_malloc_r>
 8001130:	4605      	mov	r5, r0
 8001132:	2800      	cmp	r0, #0
 8001134:	d0ed      	beq.n	8001112 <_realloc_r+0x1e>
 8001136:	42bc      	cmp	r4, r7
 8001138:	4622      	mov	r2, r4
 800113a:	4631      	mov	r1, r6
 800113c:	bf28      	it	cs
 800113e:	463a      	movcs	r2, r7
 8001140:	f7ff ffca 	bl	80010d8 <memcpy>
 8001144:	4631      	mov	r1, r6
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fbbc 	bl	80008c4 <_free_r>
 800114c:	e7e1      	b.n	8001112 <_realloc_r+0x1e>
 800114e:	4635      	mov	r5, r6
 8001150:	e7df      	b.n	8001112 <_realloc_r+0x1e>

08001152 <_malloc_usable_size_r>:
 8001152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001156:	1f18      	subs	r0, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	bfbc      	itt	lt
 800115c:	580b      	ldrlt	r3, [r1, r0]
 800115e:	18c0      	addlt	r0, r0, r3
 8001160:	4770      	bx	lr
	...

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
